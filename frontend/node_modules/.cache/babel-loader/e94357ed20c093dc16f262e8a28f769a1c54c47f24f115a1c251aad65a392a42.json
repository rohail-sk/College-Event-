{"ast":null,"code":"import axios from 'axios';\nimport { getToken } from './auth';\nconst BASE_URL = \"http://localhost:8081/api\"; // adjust if needed\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: BASE_URL\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const login = data => axios.post(`${BASE_URL}/auth/login`, data);\nexport const register = data => axios.post(`${BASE_URL}/auth/register`, data);\nexport const registerFaculty = data => api.post(`/admin/add-faculty`, data);\n\n// Fetch all upcoming events\nexport const getEvents = () => api.get(`/events/all-events`);\n\n// Faculty requests event (sends info to admin for approval)\nexport const requestEvent = data => api.post(`/events/request-event`, data);\n\n// Admin: get all requested events\nexport const getRequestedEvents = () => api.get(`/events/all-requested-events`);\n\n// Admin: approve a requested event\nexport const approveEventRequest = requestId => api.post(`/events/approve-event/${requestId}`);\n\n// Admin: reject a requested event\nexport const rejectEventRequest = requestId => api.post(`/events/reject-event/${requestId}`);\n\n// Admin: modify a requested event with a remark\nexport const addRemarkToEvent = (requestId, requestBody) => api.put(`/admin/modify-event/${requestId}`, requestBody);\n\n// Admin: create event directly (bypassing faculty request)\nexport const adminCreateEvent = data => api.post(`/events/create-event`, data);\n\n// After admin approval, faculty creates event (final registration)\nexport const createEvent = data => api.post(`/events/create-event`, data);\n\n// Faculty: edit an existing event request\nexport const editEventRequest = (eventId, eventData) => api.put(`/events/edit-existing-event/${eventId}`, eventData);\n\n// Faculty: mark remark as notified/read to prevent repeated notifications\nexport const markRemarkAsNotified = eventId => {\n  // Make sure we have a valid event ID\n  if (!eventId) {\n    console.error('Invalid eventId provided to markRemarkAsNotified:', eventId);\n    return Promise.reject(new Error('Invalid event ID'));\n  }\n  return api.put(`/events/mark-remark-notified/${eventId}`, {\n    remarkNotified: true\n  }).catch(error => {\n    console.error('Failed to mark remark as notified:', error);\n    throw error;\n  });\n};\n\n// Fetch all events requested by a specific faculty\nexport const getEventsByFacultyId = (facultyId, params = {}) => {\n  // Add a timestamp parameter to prevent browser caching if not already provided\n  const finalParams = params.timestamp ? params : {\n    ...params,\n    timestamp: new Date().getTime()\n  };\n  return api.get(`/events/all-requested-events/${facultyId}`, {\n    params: finalParams\n  });\n};\n\n// Cancel an event\nexport const cancelEvent = eventId => api.delete(`/events/delete-existing-event/${eventId}`);\n\n// Removed getRegisteredEvents API as registration status is now checked via registerForEvent response\n\n// Register for an event (expects eventId and student info)\n// If data contains action:'check', it will only check enrollment status without registering\nexport const registerForEvent = data => api.post(`/students/register-student`, data);\n\n// Cancel event registration (expects eventId and student info)\nexport const cancelEventRegistration = data => api.post(`/events/cancel-registration`, data);","map":{"version":3,"names":["axios","getToken","BASE_URL","api","create","baseURL","interceptors","request","use","config","token","headers","error","Promise","reject","login","data","post","register","registerFaculty","getEvents","get","requestEvent","getRequestedEvents","approveEventRequest","requestId","rejectEventRequest","addRemarkToEvent","requestBody","put","adminCreateEvent","createEvent","editEventRequest","eventId","eventData","markRemarkAsNotified","console","Error","remarkNotified","catch","getEventsByFacultyId","facultyId","params","finalParams","timestamp","Date","getTime","cancelEvent","delete","registerForEvent","cancelEventRegistration"],"sources":["C:/Users/Rohail/Desktop/3rd year project/college-event/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { getToken } from './auth';\n\nconst BASE_URL = \"http://localhost:8081/api\"; // adjust if needed\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: BASE_URL\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = getToken();\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport const login = (data) => axios.post(`${BASE_URL}/auth/login`, data);\nexport const register = (data) => axios.post(`${BASE_URL}/auth/register`, data);\nexport const registerFaculty = (data) => api.post(`/admin/add-faculty`, data);\n\n// Fetch all upcoming events\nexport const getEvents = () => api.get(`/events/all-events`);\n\n// Faculty requests event (sends info to admin for approval)\nexport const requestEvent = (data) => api.post(`/events/request-event`, data);\n\n// Admin: get all requested events\nexport const getRequestedEvents = () => api.get(`/events/all-requested-events`);\n\n// Admin: approve a requested event\nexport const approveEventRequest = (requestId) => api.post(`/events/approve-event/${requestId}`);\n\n// Admin: reject a requested event\nexport const rejectEventRequest = (requestId) => api.post(`/events/reject-event/${requestId}`);\n\n// Admin: modify a requested event with a remark\nexport const addRemarkToEvent = (requestId, requestBody) => api.put(`/admin/modify-event/${requestId}`, requestBody);\n\n// Admin: create event directly (bypassing faculty request)\nexport const adminCreateEvent = (data) => api.post(`/events/create-event`, data);\n\n// After admin approval, faculty creates event (final registration)\nexport const createEvent = (data) => api.post(`/events/create-event`, data);\n\n// Faculty: edit an existing event request\nexport const editEventRequest = (eventId, eventData) => api.put(`/events/edit-existing-event/${eventId}`, eventData);\n\n// Faculty: mark remark as notified/read to prevent repeated notifications\nexport const markRemarkAsNotified = (eventId) => {\n  // Make sure we have a valid event ID\n  if (!eventId) {\n    console.error('Invalid eventId provided to markRemarkAsNotified:', eventId);\n    return Promise.reject(new Error('Invalid event ID'));\n  }\n  return api.put(`/events/mark-remark-notified/${eventId}`, { remarkNotified: true })\n    .catch(error => {\n      console.error('Failed to mark remark as notified:', error);\n      throw error;\n    });\n};\n\n// Fetch all events requested by a specific faculty\nexport const getEventsByFacultyId = (facultyId, params = {}) => {\n  // Add a timestamp parameter to prevent browser caching if not already provided\n  const finalParams = params.timestamp ? params : { ...params, timestamp: new Date().getTime() };\n  return api.get(`/events/all-requested-events/${facultyId}`, { params: finalParams });\n};\n\n// Cancel an event\nexport const cancelEvent = (eventId) => api.delete(`/events/delete-existing-event/${eventId}`);\n\n// Removed getRegisteredEvents API as registration status is now checked via registerForEvent response\n\n// Register for an event (expects eventId and student info)\n// If data contains action:'check', it will only check enrollment status without registering\nexport const registerForEvent = (data) => api.post(`/students/register-student`, data);\n\n// Cancel event registration (expects eventId and student info)\nexport const cancelEventRegistration = (data) => api.post(`/events/cancel-registration`, data);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}