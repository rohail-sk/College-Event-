{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = \"http://localhost:8081/api\"; // adjust if needed\n\nexport const login = data => axios.post(`${BASE_URL}/auth/login`, data);\nexport const register = data => axios.post(`${BASE_URL}/auth/register`, data);\nexport const registerFaculty = data => axios.post(`${BASE_URL}/admin/add-faculty`, data);\n\n// Fetch all upcoming events\nexport const getEvents = () => axios.get(`${BASE_URL}/events/all-events`);\n\n// Faculty requests event (sends info to admin for approval)\nexport const requestEvent = data => axios.post(`${BASE_URL}/events/request-event`, data);\n\n// Admin: get all requested events\nexport const getRequestedEvents = () => axios.get(`${BASE_URL}/events/all-requested-events`);\n\n// Admin: approve a requested event\nexport const approveEventRequest = requestId => axios.post(`${BASE_URL}/events/approve-event/${requestId}`);\n\n// Admin: reject a requested event\nexport const rejectEventRequest = requestId => axios.post(`${BASE_URL}/events/reject-event/${requestId}`);\n\n// After admin approval, faculty creates event (final registration)\nexport const createEvent = data => axios.post(`${BASE_URL}/events/create-event`, data);\n\n// Fetch event by ID\nexport const getEventById = eventId => axios.get(`${BASE_URL}/events/event-by-id/${eventId}`);\n\n// Admin: modify event request with remarks\nexport const modifyEventRequest = (requestId, eventData) => axios.put(`${BASE_URL}/admin/modify-event/${requestId}`, eventData);\n\n// Faculty: update an existing event request (resets status to pending for admin re-examination)\nexport const updateEventRequest = (requestId, eventData) => axios.put(`${BASE_URL}/events/edit-existing-event/${requestId}`, eventData);\n\n// Admin: create event directly (goes live without approval process)\nexport const adminCreateEvent = eventData => {\n  // Log data being sent for debugging\n  console.log('API sending event data:', eventData);\n\n  // Ensure faculty_id is a number and not null/undefined\n  let facultyId = Number(eventData.facultyId || eventData.adminId || eventData.id || 0);\n\n  // Create a new object with ONLY the fields needed by the backend\n  // This prevents any field name conflicts or extra fields causing issues\n  const backendEventData = {\n    title: eventData.title,\n    date: eventData.date,\n    description: eventData.description,\n    venue: eventData.venue,\n    status: eventData.status || 'Approved',\n    facultyId: facultyId,\n    // Using camelCase facultyId since that might be what the backend expects\n    created_by: 'admin'\n  };\n  console.log('Modified event data for backend:', backendEventData);\n  console.log('facultyId type:', typeof backendEventData.facultyId);\n  console.log('facultyId value:', backendEventData.facultyId);\n\n  // First, try to send a direct console log to see the exact payload\n  const payload = JSON.stringify(backendEventData);\n  console.log('Raw JSON payload:', payload);\n\n  // If facultyId is 0 or undefined, try to use the original adminId value\n  if (!backendEventData.facultyId && eventData.adminId) {\n    console.log('Using original adminId as fallback:', eventData.adminId);\n    backendEventData.facultyId = Number(eventData.adminId);\n  }\n\n  // Directly try with a hardcoded value if all else fails - ONLY FOR TESTING!\n  // if (!backendEventData.facultyId) {\n  //   console.log('Using hardcoded value for testing');\n  //   backendEventData.facultyId = 1;  // Replace with a valid admin ID from your database\n  // }\n\n  // Return the API call\n  console.log('Final payload before sending:', backendEventData);\n  return axios.post(`${BASE_URL}/events/create-event`, backendEventData);\n}; // Fetch all events created by a specific admin\nexport const getEventsByAdminId = adminId => axios.get(`${BASE_URL}/events/all-requested-events/${adminId}`);\n\n// Fetch all events requested by a specific faculty\nexport const getEventsByFacultyId = facultyId => axios.get(`${BASE_URL}/events/all-requested-events/${facultyId}`);\n\n// Admin: cancel an event\nexport const cancelEvent = eventId => axios.put(`${BASE_URL}/events/cancel-event/${eventId}`);\n\n// // Fetch events registered by a student (expects student id or email)\n// export const getRegisteredEvents = (studentIdOrEmail) => axios.get(`${BASE_URL}/events/registered`, { params: { student: studentIdOrEmail } });\n\n// // Register for an event (expects eventId and student info)\n// export const registerForEvent = (data) => axios.post(`${BASE_URL}/events/register`, data);\n\n// // Cancel event registration (expects eventId and student info)\n// export const cancelEventRegistration = (data) => axios.post(`${BASE_URL}/events/cancel`, data);","map":{"version":3,"names":["axios","BASE_URL","login","data","post","register","registerFaculty","getEvents","get","requestEvent","getRequestedEvents","approveEventRequest","requestId","rejectEventRequest","createEvent","getEventById","eventId","modifyEventRequest","eventData","put","updateEventRequest","adminCreateEvent","console","log","facultyId","Number","adminId","id","backendEventData","title","date","description","venue","status","created_by","payload","JSON","stringify","getEventsByAdminId","getEventsByFacultyId","cancelEvent"],"sources":["C:/Users/Rohail/Desktop/3rd year project/college-event/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = \"http://localhost:8081/api\"; // adjust if needed\r\n\r\nexport const login = (data) => axios.post(`${BASE_URL}/auth/login`, data);\r\nexport const register = (data) => axios.post(`${BASE_URL}/auth/register`, data);\r\nexport const registerFaculty = (data) => axios.post(`${BASE_URL}/admin/add-faculty`, data);\r\n\r\n// Fetch all upcoming events\r\nexport const getEvents = () => axios.get(`${BASE_URL}/events/all-events`);\r\n\r\n// Faculty requests event (sends info to admin for approval)\r\nexport const requestEvent = (data) => axios.post(`${BASE_URL}/events/request-event`, data);\r\n\r\n// Admin: get all requested events\r\nexport const getRequestedEvents = () => axios.get(`${BASE_URL}/events/all-requested-events`);\r\n\r\n// Admin: approve a requested event\r\nexport const approveEventRequest = (requestId) => axios.post(`${BASE_URL}/events/approve-event/${requestId}`);\r\n\r\n// Admin: reject a requested event\r\nexport const rejectEventRequest = (requestId) => axios.post(`${BASE_URL}/events/reject-event/${requestId}`);\r\n\r\n// After admin approval, faculty creates event (final registration)\r\nexport const createEvent = (data) => axios.post(`${BASE_URL}/events/create-event`, data);\r\n\r\n// Fetch event by ID\r\nexport const getEventById = (eventId) => axios.get(`${BASE_URL}/events/event-by-id/${eventId}`);\r\n\r\n// Admin: modify event request with remarks\r\nexport const modifyEventRequest = (requestId, eventData) => axios.put(`${BASE_URL}/admin/modify-event/${requestId}`, eventData);\r\n\r\n// Faculty: update an existing event request (resets status to pending for admin re-examination)\r\nexport const updateEventRequest = (requestId, eventData) => axios.put(`${BASE_URL}/events/edit-existing-event/${requestId}`, eventData);\r\n\r\n  // Admin: create event directly (goes live without approval process)\r\nexport const adminCreateEvent = (eventData) => {\r\n  // Log data being sent for debugging\r\n  console.log('API sending event data:', eventData);\r\n  \r\n  // Ensure faculty_id is a number and not null/undefined\r\n  let facultyId = Number(eventData.facultyId || eventData.adminId || eventData.id || 0);\r\n  \r\n  // Create a new object with ONLY the fields needed by the backend\r\n  // This prevents any field name conflicts or extra fields causing issues\r\n  const backendEventData = {\r\n    title: eventData.title,\r\n    date: eventData.date,\r\n    description: eventData.description,\r\n    venue: eventData.venue,\r\n    status: eventData.status || 'Approved',\r\n    facultyId: facultyId,    // Using camelCase facultyId since that might be what the backend expects\r\n    created_by: 'admin'\r\n  };\r\n  \r\n  console.log('Modified event data for backend:', backendEventData);\r\n  console.log('facultyId type:', typeof backendEventData.facultyId);\r\n  console.log('facultyId value:', backendEventData.facultyId);\r\n  \r\n  // First, try to send a direct console log to see the exact payload\r\n  const payload = JSON.stringify(backendEventData);\r\n  console.log('Raw JSON payload:', payload);\r\n  \r\n  // If facultyId is 0 or undefined, try to use the original adminId value\r\n  if (!backendEventData.facultyId && eventData.adminId) {\r\n    console.log('Using original adminId as fallback:', eventData.adminId);\r\n    backendEventData.facultyId = Number(eventData.adminId);\r\n  }\r\n  \r\n  // Directly try with a hardcoded value if all else fails - ONLY FOR TESTING!\r\n  // if (!backendEventData.facultyId) {\r\n  //   console.log('Using hardcoded value for testing');\r\n  //   backendEventData.facultyId = 1;  // Replace with a valid admin ID from your database\r\n  // }\r\n  \r\n  // Return the API call\r\n  console.log('Final payload before sending:', backendEventData);\r\n  return axios.post(`${BASE_URL}/events/create-event`, backendEventData);\r\n};// Fetch all events created by a specific admin\r\nexport const getEventsByAdminId = (adminId) => axios.get(`${BASE_URL}/events/all-requested-events/${adminId}`);\r\n\r\n// Fetch all events requested by a specific faculty\r\nexport const getEventsByFacultyId = (facultyId) => axios.get(`${BASE_URL}/events/all-requested-events/${facultyId}`);\r\n\r\n// Admin: cancel an event\r\nexport const cancelEvent = (eventId) => axios.put(`${BASE_URL}/events/cancel-event/${eventId}`);\r\n\r\n// // Fetch events registered by a student (expects student id or email)\r\n// export const getRegisteredEvents = (studentIdOrEmail) => axios.get(`${BASE_URL}/events/registered`, { params: { student: studentIdOrEmail } });\r\n\r\n// // Register for an event (expects eventId and student info)\r\n// export const registerForEvent = (data) => axios.post(`${BASE_URL}/events/register`, data);\r\n\r\n// // Cancel event registration (expects eventId and student info)\r\n// export const cancelEventRegistration = (data) => axios.post(`${BASE_URL}/events/cancel`, data);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}